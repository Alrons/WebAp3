// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AllItems;
//
//    var items = Items.FromJson(jsonString);

namespace AllItems
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Items
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("price")]
        public long Price { get; set; }

        [JsonProperty("сurrency")]
        public long Сurrency { get; set; }

        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("place")]
        public long Place { get; set; }

        [JsonProperty("health")]
        public long Health { get; set; }

        [JsonProperty("power")]
        public long Power { get; set; }

        [JsonProperty("xPover")]
        public long XPover { get; set; }
    }

    public partial class Items
    {
        public static Items[] FromJson(string json) => JsonConvert.DeserializeObject<Items[]>(json, AllItems.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Items[] self) => JsonConvert.SerializeObject(self, AllItems.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

